From: <Saved by Windows Internet Explorer 7>
Subject: Graphviz custom shapes
Date: Fri, 31 Aug 2007 18:02:24 +0300
MIME-Version: 1.0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://graphviz.org/Documentation/html/shapehowto.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3138

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Graphviz custom shapes</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; charset=3Dutf-8">
<META content=3D"MSHTML 6.00.6000.16525" name=3DGENERATOR></HEAD>
<BODY vLink=3D#888888 link=3D#339999 bgColor=3D#ffffff leftMargin=3D0 =
topMargin=3D0=20
marginwidth=3D"0" marginheight=3D"0">
<H3>Graphviz custom shapes </H3>As alluded to in the <A=20
href=3D"http://graphviz.org/Documentation/html/dotguide.pdf">dot user's =
guide</A>,=20
there are several ways to incorporate custom shapes. At this point, they =
either=20
must be in PostScript or image files, or you'll need to modify the <A=20
href=3D"http://graphviz.org/Documentation/html/download.html">source =
code</A>. A=20
serious problem is that you can't make custom shapes that work across =
all the=20
drivers and the interactive front ends such as <TT>dotty</TT> or=20
<TT>Grappa</TT>. At least SVG has interactive renderers, and PostScript =
can be=20
translated to PDF which also has some interactive features. Improving =
the=20
architecture of the graphics drivers is an ongoing project of ours.=20
<H4><A name=3Dext_image>External image files</A> </H4>If using SVG=20
(<TT>-Tsvg</TT>), PostScript (<TT>-Tps</TT>,<TT>-Tps2</TT>) or one of =
the raster=20
formats (<TT>-Tgif</TT>, <TT>-Tpng</TT>, or <TT>-Tjpg</TT>), you can =
load=20
certain images (e.g. pictures) by file name into nodes. For example: =
<PRE>   yournode [shapefile=3D"yourface.gif"];
</PRE>indicates the contents of the node are given in the GIF file=20
<TT>yourface.gif</TT>. The <A=20
href=3D"http://www.research.att.com/~erg/graphviz/info/attrs.html#d:shape=
file">shapefile</A>=20
attribute specifies which file to use.=20
<P><I>NOTE: In versions before 11 March 2006, in particular, 1.12 =
graphviz and=20
earlier, it is necessary to also set the attribute =
<TT>shape=3Dcustom</TT>. </I>
<P>With <TT>-Tsvg</TT>, shapefile must give the name of a file =
containing a GIF,=20
PNG or JPEG bitmap file. Note that the file's contents are not copied =
into the=20
SVG output, only the files name. Thus, for Graphviz SVG output to =
display=20
correctly, the image file must be available to the SVG viewer.=20
<P>With PostScript, shapefile must give the name of a file containing=20
encapsulated PostScript or a bitmap. The contents are copied into the =
output=20
file. Note that encapsulated PostScript will only be copied in once. The =

restrictions on the contents of the shapefile are the same as those =
specified=20
below under <A=20
href=3D"http://graphviz.org/Documentation/html/shapehowto.html#ext_ps">Ex=
ternal=20
PostScript files</A>.=20
<P>In the raster formats (based on Boutell's <TT>libgd</TT>), =
<TT>shapefile</TT>=20
is a file name containing a bitmap image. The file is opened and copied =
(and=20
possibly scaled) into the output drawing.=20
<P>This code is still preliminary, and we have noted some problems with =
color=20
quantization in indexed color map management that we are trying to =
understand=20
and correct. (You can use <TT>-Gtruecolor=3D1</TT> to try a 32 bit =
internal canvas=20
as an alternative, but we have observed fuzziness (lossiness?) in the =
images.)=20
<P>When the software is used as a web server, access to image files is =
more=20
restrictive. See <A href=3D"file:///d:GV_FILE_PATH">GV_FILE_PATH</A> and =
<A=20
href=3D"file:///d:SERVER_NAME">SERVER_NAME</A>.=20
<H4><A name=3Dext_ps>External PostScript files </A></H4>If using the =
PostScript=20
driver (<TT>-Tps</TT>) you can import node shapes as external PostScript =
files=20
such as EPS (Encapsulated PostScript). At a minimum, the external file =
must have=20
a valid <TT>BoundingBox</TT> header and not do drastic things to the =
graphics=20
state since we don't install a wrapper for example to inhibit =
<TT>showpage</TT>.=20

<P>To import an external PostScript file, set the <TT>shape</TT> and=20
<TT>shapefile</TT> attributes as shown here: <DFN><TT>somenode =
[shape=3Depsf,=20
shapefile=3D"yourfile.ps" ]; </TT></DFN>An EPSF shape is always clipped =
to its=20
bounding box.=20
<P>The use of <TT>[shape=3Depsf, shapefile=3D"yourfile.ps" ]</TT> is =
largely=20
superceded by the mechanism described in the previous section, using=20
<TT>[shapefile=3D"yourfile.ps" ]</TT>.=20
<H4><A name=3Dpsprocs>External PostScript procedures</A></H4>If using =
the=20
PostScript driver (<TT>dot -Tps</TT>), you can define a PostScript =
procedure for=20
shape drawing. The procedure must be able to draw variable-sized shapes. =
A file=20
containing the definition can be loaded as a command line argument using =
the=20
<TT>-l</TT> flag: <PRE><TT>
	dot  -Tps -l yourPS.ps  file.dot -o file.ps
</TT></PRE>In the graph file, invoke the shape like this: <PRE><TT>
	somenode [shape=3Dyourshape]
</TT></PRE>In <TT>file.ps</TT>, for non-filled nodes, the procedure for=20
<TT>yourshape</TT> will be called like this: <PRE><TT>
[ 54 36 0 36 0 0 54 0 54 36 ]  4 false yourshape
</TT></PRE>where the current color is the node's pencolor. The array =
contains=20
the shape's bounding polygon, with the first point repeated at the end, =
followed=20
by the number of points. At present, the shape is always a rectangle. =
From left=20
to right, the points in the array always go counterclockwise, starting =
with the=20
upper-right vertex. The boolean value after the number of vertices, here =

<TT>false</TT>, is the value of the node's "fill" attribute. The =
coordinates are=20
absolute canvas coordinates.=20
<P>For nodes with <TT>fill=3Dtrue</TT>, the above invocation of =
<TT>yourshape</TT>=20
will be preceded by <PRE><TT>
[ 54 36 0 36 0 0 54 0 54 36 ]  4 true yourshape
</TT></PRE>where the current color is the node's fillcolor.=20
<P><I>NOTE: In versions before 23 September 2005, <TT>yourshape</TT> is =
only=20
invoked once, with the node's fill value and with the color set to the =
node's=20
pencolor. </I>
<P>For example, here are the contents of a plausible shape file,=20
<TT>DFD.ps</TT>, which can be invoked by <TT>[shape=3DDFDbox]</TT> <PRE>	=
/xdef {exch def} bind def
	/DFDbox {
		10 dict begin
			/fflag xdef
			/sides xdef
			fflag   % if shape is filled
			{
				aload pop
				newpath
				moveto
				1 1 sides { pop lineto } for
				closepath fill
			}
			{
				aload pop
				% draw the sides
				newpath
				moveto
				1 1 sides {
					2 mod 0 ne
					{moveto} % even sides
					{lineto currentpoint stroke moveto} % odd sides
					ifelse
				} for
            }
			ifelse
		end
	} bind def
</PRE>A custom shape of this kind is always clipped to its bounding box. =
It=20
would not be hard to create a hook in the function <TT>user_shape()</TT> =
in=20
<TT>shapes.c</TT> to determine clipping polygons other than rectangles =
(maybe)=20
in case someone wants to try this and contribute the code for this.=20
<P>Note that, by default, the bounding box is drawn around the contents =
and the=20
node label is drawn. If you wish to eliminate these, set label=3D"" and=20
peripheries=3D0 in the node.=20
<H4>Driver-independent custom shapes </H4>If not using PostScript, =
you'll need=20
to roll up your sleeves and modify the source. None of the other code =
generators=20
support custom node shapes directly, yet. If the custom shape is to be=20
high-level and driver-independent, then you can add shape-specific =
functions=20
(methods) to <TT>shapes.c</TT> with a corresponding entry in the array=20
<TT>Shapes[]</TT> that maps shape names to methods. The method =
interfaces are=20
described in the comment header in this file. Methods must be defined to =

initialize a shape (typically to size it big enough to fit its text =
label), bind=20
a port name to a coordinate, test if a point is inside an instance of =
the shape=20
(for edge clipping), generate code for the shape via the =
<TT>CodeGen</TT>=20
functions, and return a box path to reach ports on the interior of a =
node (if=20
they can exist).=20
<P>This is where you'd implement a shape that can be drawn as a sequence =
of=20
strokes, filled paths, and text labels.=20
<P>Shapes that behave more or less like polygons can be bootstrapped =
from the=20
basic polygon methods; see for example the "invtri" shape. Such shapes =
use a=20
polygon descriptor whose fields are listed below.=20
<TABLE cellSpacing=3D0 cellPadding=3D5 border=3D1>
  <CAPTION align=3Dtop>Polygon descriptor fields</CAPTION>
  <TBODY>
  <TR align=3Dleft>
    <TH>regul</TH>
    <TD>if a regular polygon</TD>
    <TD>FALSE</TD></TR>
  <TR align=3Dleft>
    <TH>perip</TH>
    <TD>number of border peripheries</TD>
    <TD>1</TD></TR>
  <TR align=3Dleft>
    <TH>sides</TH>
    <TD>number of sides (1 for curves)</TD>
    <TD>4</TD></TR>
  <TR align=3Dleft>
    <TH>orien</TH>
    <TD>angular rotation in degrees </TD>
    <TD>0</TD></TR>
  <TR align=3Dleft>
    <TH>disto</TH>
    <TD>trapezoidal distortion</TD>
    <TD>0</TD></TR>
  <TR align=3Dleft>
    <TH>skew</TH>
    <TD>parallelogram distortion</TD>
    <TD>0</TD></TR>
  <TR align=3Dleft>
    <TH>flags</TH>
    <TD>fancy options: ROUNDED, DIAGONALS, AUXLABELS</TD>
    <TD>0</TD></TR></TBODY></TABLE>
<P>For example shapes not derived from general polygons, see the =
<TT>record</TT>=20
or <TT>epsf</TT> shape.=20
<H4>Driver-dependent custom shapes </H4>To implement a driver-specific =
shape=20
(such as <A =
href=3D"http://cloanto.com/users/mcb/19950127giflzw.html">GIF</A> or=20
<A href=3D"http://www.cdrom.com/pub/png/">PNG</A> icons) you'll need to =
write a=20
body for the driver function that implements user-defined shapes. (The =
drivers=20
are in <TT>*gen.c</TT>). A user shape function receives four arguments: =
<BR>-=20
the custom shape name string <BR>- the absolute canvas coords of the =
shape=20
bounding polygon <BR>- number of coords (currently, always 4) <BR>- fill =
flag=20
<BR>
<P>The rest is up to you, but contact us first just in case. (FYI, the =
<A=20
href=3D"http://www.graphviz.org/cvs.html">gv1.6 beta</A> has a =
compile-time PNG=20
replacement for the GIF driver.)=20
<P>
<CENTER></CENTER></BODY></HTML>
